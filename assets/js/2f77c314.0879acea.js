"use strict";(self.webpackChunkfnts_docs=self.webpackChunkfnts_docs||[]).push([[799],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return s}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),o=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},m=function(e){var t=o(e.components);return n.createElement(d.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=o(a),s=r,N=u["".concat(d,".").concat(s)]||u[s]||k[s]||l;return a?n.createElement(N,p(p({ref:t},m),{},{components:a})):n.createElement(N,p({ref:t},m))}));function s(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,p=new Array(l);p[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var o=2;o<l;o++)p[o]=a[o];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1275:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return d},metadata:function(){return o},toc:function(){return m},default:function(){return u}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),p=["components"],i={},d="Module: Types",o={unversionedId:"api/modules/Types",id:"api/modules/Types",isDocsHomePage:!1,title:"Module: Types",description:"Type aliases",source:"@site/docs/api/modules/Types.md",sourceDirName:"api/modules",slug:"/api/modules/Types",permalink:"/fnts/api/modules/Types",editUrl:"https://github.com/drizzer14/fnts/docs/docs/api/modules/Types.md",tags:[],version:"current",frontMatter:{},sidebar:"default",previous:{title:"Module: Ternary",permalink:"/fnts/api/modules/Ternary"}},m=[{value:"Type aliases",id:"type-aliases",children:[{value:"Effect",id:"effect",children:[{value:"Type parameters",id:"type-parameters",children:[],level:4},{value:"Type declaration",id:"type-declaration",children:[{value:"Parameters",id:"parameters",children:[],level:5},{value:"Returns",id:"returns",children:[],level:5}],level:4}],level:3},{value:"Gradual",id:"gradual",children:[{value:"Type parameters",id:"type-parameters-1",children:[],level:4}],level:3},{value:"Last",id:"last",children:[{value:"Type parameters",id:"type-parameters-2",children:[],level:4}],level:3},{value:"Map",id:"map",children:[{value:"Type parameters",id:"type-parameters-3",children:[],level:4},{value:"Type declaration",id:"type-declaration-1",children:[{value:"Parameters",id:"parameters-1",children:[],level:5},{value:"Returns",id:"returns-1",children:[],level:5}],level:4}],level:3},{value:"Slice",id:"slice",children:[{value:"Type parameters",id:"type-parameters-4",children:[],level:4}],level:3},{value:"Tuple",id:"tuple",children:[{value:"Type parameters",id:"type-parameters-5",children:[],level:4}],level:3},{value:"UnaryFunction",id:"unaryfunction",children:[{value:"Type declaration",id:"type-declaration-2",children:[{value:"Parameters",id:"parameters-2",children:[],level:5},{value:"Returns",id:"returns-2",children:[],level:5}],level:4}],level:3},{value:"VariadicFunction",id:"variadicfunction",children:[{value:"Type declaration",id:"type-declaration-3",children:[{value:"Parameters",id:"parameters-3",children:[],level:5},{value:"Returns",id:"returns-3",children:[],level:5}],level:4}],level:3}],level:2}],k={toc:m};function u(e){var t=e.components,a=(0,r.Z)(e,p);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"module-types"},"Module: Types"),(0,l.kt)("h2",{id:"type-aliases"},"Type aliases"),(0,l.kt)("h3",{id:"effect"},"Effect"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"Effect"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"Function"),">",": (...",(0,l.kt)("inlineCode",{parentName:"p"},"args"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Parameters"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"Function"),">",") => ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Function")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("a",{parentName:"td",href:"/fnts/api/modules/Types#variadicfunction"},(0,l.kt)("inlineCode",{parentName:"a"},"VariadicFunction")))))),(0,l.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,l.kt)("p",null,"\u25b8 (...",(0,l.kt)("inlineCode",{parentName:"p"},"args"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"A simple side effect function descriptor."),(0,l.kt)("h5",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"...args")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Parameters"),"<",(0,l.kt)("inlineCode",{parentName:"td"},"Function"),">")))),(0,l.kt)("h5",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"gradual"},"Gradual"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"Gradual"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"T")," extends ","[...infer R, ",(0,l.kt)("inlineCode",{parentName:"p"},"any"),"]"," ? ",(0,l.kt)("inlineCode",{parentName:"p"},"R"),"[",(0,l.kt)("inlineCode",{parentName:"p"},'"length"'),"]"," extends ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," ? ",(0,l.kt)("inlineCode",{parentName:"p"},"T")," : ",(0,l.kt)("inlineCode",{parentName:"p"},"T")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/fnts/api/modules/Types#gradual"},(0,l.kt)("inlineCode",{parentName:"a"},"Gradual")),"<",(0,l.kt)("inlineCode",{parentName:"p"},"R"),">"," : ",(0,l.kt)("inlineCode",{parentName:"p"},"T")),(0,l.kt)("p",null,"Gradual defines a tuple type which accepts any amount\nof entries from the original one."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"Gradual<[1, 2, 3]> === [1] | [1, 2] | [1, 2, 3]\n")),(0,l.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),"[] ","|"," readonly ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),"[]")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"last"},"Last"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"Last"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"T")," extends [...any[], infer L] ? ",(0,l.kt)("inlineCode",{parentName:"p"},"L")," : ",(0,l.kt)("inlineCode",{parentName:"p"},"any")),(0,l.kt)("p",null,"Picks the last entry from the tuple or array."),(0,l.kt)("h4",{id:"type-parameters-2"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),"[]")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"map"},"Map"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"Map"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"From"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"To"),">",": (",(0,l.kt)("inlineCode",{parentName:"p"},"value"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"From"),") => ",(0,l.kt)("inlineCode",{parentName:"p"},"To")),(0,l.kt)("h4",{id:"type-parameters-3"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"From"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"To"))))),(0,l.kt)("h4",{id:"type-declaration-1"},"Type declaration"),(0,l.kt)("p",null,"\u25b8 (",(0,l.kt)("inlineCode",{parentName:"p"},"value"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"To")),(0,l.kt)("p",null,"A type of a function which maps the original value type to another one."),(0,l.kt)("h5",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"value")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"From"))))),(0,l.kt)("h5",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"To")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"slice"},"Slice"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"Slice"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"C"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),"[",(0,l.kt)("inlineCode",{parentName:"p"},'"length"'),"]"," extends ",(0,l.kt)("inlineCode",{parentName:"p"},"C")," ? ",(0,l.kt)("inlineCode",{parentName:"p"},"T")," : ",(0,l.kt)("inlineCode",{parentName:"p"},"T")," extends readonly ","[...Tuple<C",">",", ...infer S]"," ? ",(0,l.kt)("inlineCode",{parentName:"p"},"S")," : ",(0,l.kt)("inlineCode",{parentName:"p"},"T")," extends ","[...Tuple<C",">",", ...infer S]"," ? ",(0,l.kt)("inlineCode",{parentName:"p"},"S")," : ",(0,l.kt)("inlineCode",{parentName:"p"},"T")),(0,l.kt)("p",null,"Slices the tuple by ",(0,l.kt)("inlineCode",{parentName:"p"},"C")," amount of entries from the ",(0,l.kt)("strong",{parentName:"p"},"end"),"."),(0,l.kt)("h4",{id:"type-parameters-4"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),"[] ","|"," readonly ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),"[]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"C")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"number"))))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tuple"},"Tuple"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"Tuple"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"L"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"T")," extends { ",(0,l.kt)("inlineCode",{parentName:"p"},"length"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"L"),"  } ? ",(0,l.kt)("inlineCode",{parentName:"p"},"T")," : ",(0,l.kt)("a",{parentName:"p",href:"/fnts/api/modules/Types#tuple"},(0,l.kt)("inlineCode",{parentName:"a"},"Tuple")),"<",(0,l.kt)("inlineCode",{parentName:"p"},"L"),", ","[...T, ",(0,l.kt)("inlineCode",{parentName:"p"},"any"),"]",">"),(0,l.kt)("p",null,"Creates a tuple of specified length."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://itnext.io/implementing-arithmetic-within-typescripts-type-system-a1ef140a6f6f"},"Gracefully borrowed from here")),(0,l.kt)("h4",{id:"type-parameters-5"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"L")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"number"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),"[] ","|"," readonly ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),"[] = []")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"unaryfunction"},"UnaryFunction"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"UnaryFunction"),": (",(0,l.kt)("inlineCode",{parentName:"p"},"arg"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"any"),") => ",(0,l.kt)("inlineCode",{parentName:"p"},"any")),(0,l.kt)("h4",{id:"type-declaration-2"},"Type declaration"),(0,l.kt)("p",null,"\u25b8 (",(0,l.kt)("inlineCode",{parentName:"p"},"arg"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"any")),(0,l.kt)("p",null,"A type of a function accepting exactly one argument"),(0,l.kt)("h5",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"arg")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"any"))))),(0,l.kt)("h5",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"any")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"variadicfunction"},"VariadicFunction"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"VariadicFunction"),": (...",(0,l.kt)("inlineCode",{parentName:"p"},"args"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"any"),"[]) => ",(0,l.kt)("inlineCode",{parentName:"p"},"any")),(0,l.kt)("h4",{id:"type-declaration-3"},"Type declaration"),(0,l.kt)("p",null,"\u25b8 (...",(0,l.kt)("inlineCode",{parentName:"p"},"args"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"any")),(0,l.kt)("p",null,"A type of a function accepting an arbitrary amount of arguments"),(0,l.kt)("h5",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"...args")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"any"),"[]")))),(0,l.kt)("h5",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"any")))}u.isMDXComponent=!0}}]);