"use strict";(self.webpackChunkfnts_docs=self.webpackChunkfnts_docs||[]).push([[270],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),i=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=i(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=i(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var i=2;i<s;i++)a[i]=t[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2050:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var r=t(7462),o=(t(7294),t(3905));const s={id:"lens",slug:"/concepts/lens",title:"Lens"},a=void 0,c={unversionedId:"concepts/lens",id:"concepts/lens",title:"Lens",description:'There\'s a pattern in functional programming called "lenses". fnts brings two necessary functions',source:"@site/docs/concepts/lens.md",sourceDirName:"concepts",slug:"/concepts/lens",permalink:"/fnts/concepts/lens",draft:!1,editUrl:"https://github.com/drizzer14/fnts/docs/docs/concepts/lens.md",tags:[],version:"current",frontMatter:{id:"lens",slug:"/concepts/lens",title:"Lens"},sidebar:"default",previous:{title:"Guarding",permalink:"/fnts/concepts/guarding"},next:{title:"Monads",permalink:"/fnts/concepts/monads"}},l={},i=[{value:"get",id:"get",level:2},{value:"set",id:"set",level:2},{value:"lens",id:"lens",level:2}],p={toc:i};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'There\'s a pattern in functional programming called "lenses". ',(0,o.kt)("inlineCode",{parentName:"p"},"fnts")," brings two necessary functions\nfor this pattern to work, although in a simplified manner, \u2013 ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"set"),"."),(0,o.kt)("p",null,"Both of them are similar to what Lodash has to offer, it was just really intereseting to build them on my own."),(0,o.kt)("h2",{id:"get"},"get"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"get")," function can be used to get a value from inside an array/object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import get from 'fnts/lens/get';\n\nconst object = {\n  a: {\n    b: {\n      c: 1\n    }\n  }\n};\n\nconst value = get(object, 'a.b.c'); // 1\n")),(0,o.kt)("p",null,"Morevoer, you can access values deeply nested inside arrays:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import get from 'fnts/lens/get';\n\nconst object = {\n  a: {\n    b: [\n      { c: 0 },\n      { c: 1 },\n      { c: 2 },\n      { c: 3 },\n    ]\n  }\n};\n\nconst value = get(object, 'a.b.1.c'); // 1\n")),(0,o.kt)("h2",{id:"set"},"set"),(0,o.kt)("p",null,"Same as with ",(0,o.kt)("inlineCode",{parentName:"p"},"get"),", you can use dot-notation access on nested object to modify\na value at the provided path."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import set from 'fnts/lens/set';\n\nconst object = {\n  a: {\n    b: [\n      { c: 0 },\n      { c: 1 },\n      { c: 2 },\n      { c: 3 },\n    ]\n  }\n};\n\nconst objectCopy = set(object, 'a.b.1.c', 4);\n")),(0,o.kt)("p",null,"Returned value will be a deep copy of the original object made using ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/structuredClone"},(0,o.kt)("inlineCode",{parentName:"a"},"structuredClone")),"\nwhich, of course, includes the modified value."),(0,o.kt)("h2",{id:"lens"},"lens"),(0,o.kt)("p",null,"To create lenses themselves, you'd need to use the source-first argument application for ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"set"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import get from 'fnts/lens/get';\nimport set from 'fnts/lens/set';\n\nconst object = {\n  a: {\n    b: [\n      { c: 0 },\n      { c: 1 },\n      { c: 2 },\n      { c: 3 },\n    ]\n  }\n};\n\nconst objectLens = {\n  get: get(object),\n  set: set(object),\n};\n\nconst value = objectLens.get('a.b.1.c'); // 1\nconst objectCopy = objectLens.set('a.b.1.c', 4);\n")),(0,o.kt)("p",null,"Or, simply use the ",(0,o.kt)("inlineCode",{parentName:"p"},"lens")," function!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import lens from 'fnts/lens';\n\nconst object = {\n  a: {\n    b: [\n      { c: 0 },\n      { c: 1 },\n      { c: 2 },\n      { c: 3 },\n    ]\n  }\n};\n\nconst objectLens = lens(object);\n\nconst value = objectLens('a.b.1.c'); // 1\nconst objectCopy = objectLens('a.b.1.c', 4);\n")))}u.isMDXComponent=!0}}]);