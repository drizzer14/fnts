"use strict";(self.webpackChunkfnts_docs=self.webpackChunkfnts_docs||[]).push([[372],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(t),f=a,d=u["".concat(p,".").concat(f)]||u[f]||m[f]||o;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6777:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={id:"overview",slug:"/",title:"Overview",sidebar_position:0},i=void 0,s={unversionedId:"overview",id:"overview",title:"Overview",description:'fnts is an abbreviation for something like a "functional TypeScript". You could see a similar concept in libraries like fp-ts or ramda, each endorsing their own implementation of the idea.',source:"@site/docs/overview.md",sourceDirName:".",slug:"/",permalink:"/fnts/",draft:!1,editUrl:"https://github.com/drizzer14/fnts/docs/docs/overview.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"overview",slug:"/",title:"Overview",sidebar_position:0},sidebar:"default",next:{title:"Installation and Usage",permalink:"/fnts/installation-and-usage"}},p={},l=[{value:"Tooling",id:"tooling",level:2},{value:"Monads",id:"monads",level:3},{value:"Composition",id:"composition",level:3},{value:"Currying",id:"currying",level:3},{value:"Application",id:"application",level:3},{value:"Arguments Permutation",id:"arguments-permutation",level:3},{value:"Side effects",id:"side-effects",level:3},{value:"Guarding",id:"guarding",level:3},{value:"Lenses",id:"lenses",level:3}],c={toc:l};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"fnts"),' is an abbreviation for something like a "functional TypeScript". You could see a similar concept in libraries like ',(0,a.kt)("a",{parentName:"p",href:"https://github.com/gcanti/fp-ts"},"fp-ts")," or ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ramda/ramda"},"ramda"),", each endorsing their own implementation of the idea."),(0,a.kt)("p",null,"Here, the philosophy is to give the small set of functions, the possession of which makes it easier to operate the code in a functional style."),(0,a.kt)("p",null,'The minimal amount of abstractions not present in the TypeScript itself, or being hard to implement and use, (like HKT, typeclasses, overwhelming amount of iterators and transducers) aims to reduce the learning curve of this seemingly "different" style of programming.'),(0,a.kt)("h2",{id:"tooling"},"Tooling"),(0,a.kt)("p",null,"The library basically provides the tools to handily operate the following concepts: monads, currying, composition, guarding, handling side effects and control flows. Nothing more, nothing less."),(0,a.kt)("h3",{id:"monads"},(0,a.kt)("a",{parentName:"h3",href:"/concepts/monads"},"Monads")),(0,a.kt)("p",null,"Out of the variety of monads ",(0,a.kt)("inlineCode",{parentName:"p"},"fnts")," chooses two presumably most suitable ones: ",(0,a.kt)("inlineCode",{parentName:"p"},"maybe")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"either"),". Each have their own constructors and operators (as opposed to classes and methods based approach seen commonly)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import maybe from 'fnts/maybe';\nimport { foldMap } from 'fnts/maybe/operators';\n\nfoldMap(\n  maybe([1, 2, 3].find((n) => n > 2)),\n  (n) => n === 3\n); // true\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import either from 'fnts/either';\nimport { bifoldMap } from 'fnts/either/operators';\n\nbifoldMap(\n  await either(\n    () => fetch('https://github.com')\n  ),\n  (error) => console.error(error),\n  (data) => data\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import eitherSync from 'fnts/either';\nimport { bifoldMap } from 'fnts/either/operators';\n\nbifoldMap(\n  eitherSync(\n   () => JSON.parse(localStorage.getItem('context'))\n  ),\n  (error) => console.error(error),\n  (data) => data\n);\n")),(0,a.kt)("h3",{id:"composition"},(0,a.kt)("a",{parentName:"h3",href:"/concepts/composition"},"Composition")),(0,a.kt)("p",null,"Composition in ",(0,a.kt)("inlineCode",{parentName:"p"},"fnts")," is represented through the ",(0,a.kt)("inlineCode",{parentName:"p"},"compose")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"pipe")," functions. Both are implemented without the overloads, which causes the types to be rather ",(0,a.kt)("em",{parentName:"p"},"imposed")," than inferred."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import compose from 'fnts/compose';\n\nconst isTwoDigits = compose(\n  compose(\n    (b: boolean) => b ? 'true' : 'false',\n    (s: string) => s.length === 2 // argument type imposed from the next function\n  ),\n  (n: number) => `${n}`,\n); // will accept only a number as argument\n\nisTwoDigits(5) === 'false';\nisTwoDigits(14) === 'true';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import pipe from 'fnts/pipe';\n\nconst isTwoDigits = pipe(\n  pipe(\n    (n: number) => `${n}`,\n    (s: string) => s.length === 2\n  ),\n  (b: boolean) => b ? 'true' : 'false',\n);\n\nisTwoDigits(5) === 'false';\nisTwoDigits(14) === 'true';\n")),(0,a.kt)("h3",{id:"currying"},(0,a.kt)("a",{parentName:"h3",href:"/concepts/currying"},"Currying")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"curry")," function is here to help with auto-currying of variadic or fixed amount of arguments."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import curry from 'fnts/curry';\n\nconst sumOfThree = curry(\n  (a: number, b: number, c: number): number => {\n    return a + b + c;\n  }\n);\n\nsumOfThree(1, 2, 3) === \nsumOfThree(1, 2)(3) === \nsumOfThree(1)(2, 3) === \nsumOfThree(1)(2)(3);\n")),(0,a.kt)("h3",{id:"application"},(0,a.kt)("a",{parentName:"h3",href:"/concepts/application"},"Application")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"apply")," function calls the functions provided to it on the same set of arguments\nand returns the tuple with results."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import apply from 'fnts/apply';\n\napply(\n    (a: number, b: number) => a + b,\n    (a: number, b: number) => a - b,\n    (a: number, b: number) => a / b,\n    (a: number, b: number) => a * b,\n)(3, 2); // [5, 1, 1.5, 6]\n")),(0,a.kt)("h3",{id:"arguments-permutation"},(0,a.kt)("a",{parentName:"h3",href:"/concepts/arguments-permutation"},"Arguments Permutation")),(0,a.kt)("p",null,"For non-commutative operations or functions that ",(0,a.kt)("em",{parentName:"p"},"can")," be applied in the compositional context it is handy to be able to automatically permutate (switch places of) their arguments. For some functions in ",(0,a.kt)("inlineCode",{parentName:"p"},"fnts")," this is already implemented:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { fmap } from 'fnts/maybe/operators';\n\nconst mapToNumber = (maybe: Maybe<string>): Maybe<number> => fmap(maybe, (value) => Number(value));\n")),(0,a.kt)("p",null,"Here, ",(0,a.kt)("inlineCode",{parentName:"p"},"mapToNumber")," declaration is equivalent to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { fmap } from 'fnts/maybe/operators';\n\nconst mapToNumber = fmap<string, number>(Number);\n")),(0,a.kt)("h3",{id:"side-effects"},(0,a.kt)("a",{parentName:"h3",href:"/concepts/side-effects"},"Side effects")),(0,a.kt)("p",null,"For handling side effects there are a couple of functions, the underlying concept of which is to not interfere with the main execution flow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import inject from 'fnts/inject';\n\nconst computeAndLog = inject(\n  compute,\n  (...args) => console.log('Computing with args: ', args)\n);\n\ncomputeAndLog(1, 2, 3);\n")),(0,a.kt)("h3",{id:"guarding"},(0,a.kt)("a",{parentName:"h3",href:"/concepts/guarding"},"Guarding")),(0,a.kt)("p",null,'In computing there\'s a pattern called "guard". Specifically, Haskell has a dedicated ',(0,a.kt)("a",{parentName:"p",href:"https://wiki.haskell.org/Pattern_guard"},"syntax")," for that, which ",(0,a.kt)("inlineCode",{parentName:"p"},"fnts")," also implemented in a more JavaScripty way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import guard from 'fnts/guard';\n\nguard<(x: number) => number>(\n  [(x) => x < 5, (x) => x + 1],\n  [(x) => x === 5, (x) => x - 1],\n  () => 1\n)(5) // 4\n")),(0,a.kt)("h3",{id:"lenses"},"Lenses"),(0,a.kt)("p",null,'There\'s a pattern in functional programming called "lenses". ',(0,a.kt)("inlineCode",{parentName:"p"},"fnts")," brings two necessary functions\nfor this pattern to work, although in a simplified manner, \u2013 ",(0,a.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import get from 'fnts/lens/get';\nimport set from 'fnts/lens/set';\n\nconst object = {\n  a: {\n    b: {\n      c: 1\n    }\n  }\n};\n\nconst value = get(object, 'a.b.c'); // 1\nconst objectCopy = set(object, 'a.b.c', 4);\n")),(0,a.kt)("p",null,"Alternatively, ",(0,a.kt)("inlineCode",{parentName:"p"},"lens")," function which combines both APIs together is available:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import lens from 'fnts/lens';\n\nconst object = {\n  a: {\n    b: [\n      { c: 0 },\n      { c: 1 },\n      { c: 2 },\n      { c: 3 },\n    ]\n  }\n};\n\nconst objectLens = lens(object);\n\nconst value = objectLens('a.b.1.c'); // 1\nconst objectCopy = objectLens('a.b.1.c', 4);\n")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"For a full overview of the available tools consult with the ",(0,a.kt)("a",{parentName:"p",href:"/api"},"API")," reference."))}m.isMDXComponent=!0}}]);